"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var t = _ref.types;

  function isValidRequireCall(path) {
    if (!path.isCallExpression()) return false;
    if (!path.get("callee").isIdentifier({ name: "require" })) return false;
    if (path.scope.getBinding("require")) return false;

    var args = path.get("arguments");
    if (args.length !== 1) return false;

    var arg = args[0];
    if (!arg.isStringLiteral()) return false;

    return true;
  }

  function isValidDefine(path) {
    if (!path.isExpressionStatement()) return;

    var expr = path.get("expression");
    if (!expr.isCallExpression()) return false;
    if (!expr.get("callee").isIdentifier({ name: "define" }) && !expr.get("callee").isIdentifier({ name: "require" })) return false;

    var args = expr.get("arguments");
    if (args.length === 3 && !args.shift().isStringLiteral()) return false;

    var firstArg = args.shift();
    if (firstArg.isArrayExpression()) {
      var secondArg = args.shift();
      if (secondArg.isFunctionExpression()) {
        return true;
      }
    } else if (firstArg.isFunctionExpression()) {
      return true;
    }

    return false;
  }

  function isValidRequireConfig(path) {
    if (!path.isExpressionStatement()) return;

    var expr = path.get("expression");
    if (!expr.isCallExpression()) return false;

    if (!expr.get("callee").get('object').isIdentifier({ name: "require" }) || !expr.get("callee").get('property').isIdentifier({ name: "config" })) return false;

    return true;
  }

  var amdVisitor = {
    ReferencedIdentifier: function ReferencedIdentifier(_ref2) {
      var node = _ref2.node;
      var scope = _ref2.scope;

      if (node.name === "exports" && !scope.getBinding("exports")) {
        this.hasExports = true;
      }

      if (node.name === "module" && !scope.getBinding("module")) {
        this.hasModule = true;
      }
    },
    CallExpression: function CallExpression(path) {
      if (!isValidRequireCall(path)) return;
      this.bareSources.push(path.node.arguments[0]);
      path.remove();
    },
    VariableDeclarator: function VariableDeclarator(path) {
      var id = path.get("id");
      if (!id.isIdentifier()) return;

      var init = path.get("init");
      if (!isValidRequireCall(init)) return;

      var source = init.node.arguments[0];
      this.sourceNames[source.value] = true;
      this.sources.push([id.node, source]);

      path.remove();
    }
  };

  return {
    inherits: require("babel-plugin-transform-es2015-modules-commonjs"),

    pre: function pre() {
      // source strings
      this.sources = [];
      this.sourceNames = Object.create(null);

      // bare sources
      this.bareSources = [];

      this.hasExports = false;
      this.hasModule = false;
    },

    visitor: {
      Program: {
        exit: function exit(path, state) {
          var _this = this;

          if (this.ran) return;
          this.ran = true;

          var body = path.get("body");
          var last = body[body.length - 1];
          for (var i = 0; i < body.length; i++) {
            if (isValidDefine(body[i]) || isValidRequireConfig(body[i])) return;
          }

          path.traverse(amdVisitor, this);

          var params = this.sources.map(function (source) {
            return source[0];
          });
          var sources = this.sources.map(function (source) {
            return source[1];
          });

          sources = sources.concat(this.bareSources.filter(function (str) {
            return !_this.sourceNames[str.value];
          }));

          var moduleName = this.getModuleName();
          if (moduleName) moduleName = t.stringLiteral(moduleName);

          if (this.hasExports) {
            sources.unshift(t.stringLiteral("exports"));
            params.unshift(t.identifier("exports"));
          }

          if (this.hasModule) {
            sources.unshift(t.stringLiteral("module"));
            params.unshift(t.identifier("module"));
          }

          path.node.body = [buildDefine({
            MODULE_NAME: moduleName,
            SOURCES: sources,
            PARAMS: params,
            BODY: path.node.body
          })];
        }
      }
    }
  };
};

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildDefine = (0, _babelTemplate2.default)("\n  define(MODULE_NAME, [SOURCES], function (PARAMS) {\n    BODY;\n  });\n");